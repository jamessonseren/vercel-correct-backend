// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider = "prisma-client-js"
// }

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CorrectAdmin {
  id          String        @id @default(uuid())
  name        String
  userName    String        @unique
  email       String        @unique
  password    String
<<<<<<< HEAD
=======
  permissions UserRoles[]   @default([admin])
>>>>>>> correct-nodejs-backend/main
  CompanyData CompanyData[]
  AppUserData AppUserData[]
  Cards       Cards[]

  @@map("correct_admin")
}

<<<<<<< HEAD
enum CompanyPermissions {
  admin
  ecommerce
  sales
}

model CompanyUser {
  id           String               @id @default(uuid())
  email        String?              @unique
  cnpj         String               @unique
  user_name    String               @unique
  password     String
  fullName     String?
  permissions  CompanyPermissions[] @default([admin])
  function     String?
  client_admin Boolean              @default(false)
  created_at   DateTime?            @default(now())
  updated_at   DateTime?            @updatedAt
=======
enum UserRoles {
  admin
  user
}

enum Permissions {
  none
  sales
  finances
  marketing
  benefits
  transports
  allPartners
  allEmployers
}

enum Permission {
  all
}

model CompanyUser {
  id           String        @id @default(uuid())
  email        String?       @unique
  cnpj         String
  cpf          String?       @unique
  user_name    String        @unique
  user_code    String        @default(uuid())
  password     String
  fullName     String?
  roles        UserRoles[]   @default([admin])
  permissions  Permissions[] @default([none])
  function     String?
  client_admin Boolean       @default(false)
  created_at   DateTime?     @default(now())
  updated_at   DateTime?     @updatedAt
>>>>>>> correct-nodejs-backend/main

  CompanyData   CompanyData[]
  CompanyType   CompanyType[]
  Product       Product[]
  Advertisement Advertisement[]

<<<<<<< HEAD
  @@map("company_user")
=======
  @@map("company_users")
>>>>>>> correct-nodejs-backend/main
}

model CompanyData {
  id               String  @id @default(uuid())
  corporate_name   String
  cnpj             String  @unique
<<<<<<< HEAD
  cnae_id          String
=======
>>>>>>> correct-nodejs-backend/main
  classification   String
  total_employees  Int
  phone_1          String
  phone_2          String?
<<<<<<< HEAD
  company_user_id  String
=======
  company_user_id  String  @unique
>>>>>>> correct-nodejs-backend/main
  correct_admin_id String

  CorrectAdmin CorrectAdmin @relation(fields: [correct_admin_id], references: [id])
  CompanyUser  CompanyUser  @relation(fields: [company_user_id], references: [id])

<<<<<<< HEAD
  @@map("company_data")
=======
  @@map("company_datas")
>>>>>>> correct-nodejs-backend/main
}

model CompanyType {
  id              String             @id @default(uuid())
  type            CompanyTypeOptions
  cnpj            String             @unique
  company_user_id String

  CompanyUser          CompanyUser            @relation(fields: [company_user_id], references: [id])
  AppUserData          AppUserData[]
  PartnerCards         PartnerCards[]
  EmployerCards        EmployerCards[]
  CompanyBusinessCards CompanyBusinessCards[]

<<<<<<< HEAD
  @@map("company_type")
=======
  @@map("company_types")
>>>>>>> correct-nodejs-backend/main
}

enum CompanyTypeOptions {
  empregador
  comercio
  autonomo_comercio
  empregador_comercio
}

model AppUserData {
  id                    String   @id @default(uuid())
  internal_company_code String?
  employee              Boolean  @default(true)
  company_owner         Boolean  @default(false)
  full_name             String
  gender                String
  rg                    String?
  cpf                   String   @unique
  driver_license        String?  @unique
  date_of_birth         DateTime
  function              String?
  salary                Float?
  company_type_id       String?
  status                Boolean  @default(true)
  authenticated         Boolean  @default(false)
  marital_status        String
  dependents_quantity   Int      @default(0)
<<<<<<< HEAD
  correct_admin_id       String
=======
  correct_admin_id      String
>>>>>>> correct-nodejs-backend/main

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  CorrectAdmin CorrectAdmin @relation(fields: [correct_admin_id], references: [id])
  CompanyType  CompanyType? @relation(fields: [company_type_id], references: [id])

<<<<<<< HEAD
  @@map("app_user_data")
=======
  @@map("app_user_datas")
>>>>>>> correct-nodejs-backend/main
}

model AppUserAuth {
  id            String  @id @default(uuid())
  cpf           String  @unique
  email         String  @unique
  password      String
  authenticated Boolean @default(false)

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  AppUserValidationDocument AppUserValidationDocument[]
  AppUserAccounts           AppUserAccounts[]

  @@map("app_user_auth")
}

model AppUserValidationDocument {
  id                        String  @id @default(uuid())
  face_picture              String
  document_front_picture    String
  document_back_picture     String
  face_and_document_picture String
  status                    Boolean @default(false)
  app_user_auth_id          String

  created_at DateTime? @default(now())
  updated_at DateTime? @updatedAt

  AppUserAuth AppUserAuth @relation(fields: [app_user_auth_id], references: [id])

<<<<<<< HEAD
  @@map("app_user_validation")
=======
  @@map("app_user_validations")
>>>>>>> correct-nodejs-backend/main
}

model Cards {
  id               String   @id @default(uuid())
  card_name        String   @unique
  card_type        CardType
  correct_admin_id String

  CorrectAdmin CorrectAdmin @relation(fields: [correct_admin_id], references: [id])

  created_at           DateTime?              @default(now())
  updated_at           DateTime?              @updatedAt
  PartnerCards         PartnerCards[]
  EmployerCards        EmployerCards[]
  CompanyBusinessCards CompanyBusinessCards[]
  AppUserAccounts      AppUserAccounts[]

  @@map("cards")
}

enum CardType {
  pos_pago
  pre_pago
}

model PartnerCards {
  id                 String    @id @default(uuid())
  contract_number    String    @unique @default(uuid())
  card_id            String
  company_type_id    String
  adm_correct_fee    Float
  mkt_correct_fee    Float
  total_installments Int       @default(1)
  cashback           Float
  validate           Boolean   @default(false)
  created_at         DateTime? @default(now())
  updated_at         DateTime? @updatedAt

  Cards       Cards       @relation(fields: [card_id], references: [id])
  CompanyType CompanyType @relation(fields: [company_type_id], references: [id])

  @@map("partner_cards")
}

model EmployerCards {
  id              String    @id @default(uuid())
  contract_number String    @unique @default(uuid())
  card_id         String    @unique
  company_type_id String
  created_at      DateTime? @default(now())
  updated_at      DateTime? @updatedAt

  Cards           Cards             @relation(fields: [card_id], references: [id])
  CompanyType     CompanyType       @relation(fields: [company_type_id], references: [id])
  AppUserAccounts AppUserAccounts[]

  @@map("employer_cards")
}

model AppUserAccounts {
  id                String    @id @default(uuid())
  card_id           String
  account_number    String    @unique @default(uuid())
  available_amount  Int
  employer_cards_id String?
  app_user_id       String
  status            Boolean   @default(true)
  created_at        DateTime? @default(now())
  updated_at        DateTime? @updatedAt

  EmployerCards EmployerCards? @relation(fields: [employer_cards_id], references: [id])
  AppUserAuth   AppUserAuth    @relation(fields: [app_user_id], references: [id])
  Cards         Cards          @relation(fields: [card_id], references: [id])

  @@map("app_user_accounts")
}

model CompanyBusinessCards {
  id                 String    @id @default(uuid())
  contract_number    String    @unique @default(uuid())
  card_id            String
  company_type_id    String
  adm_correct_fee    Float     @default(0)
  mkt_correct_fee    Float     @default(0)
  total_installments Int       @default(1)
  cashback           Float     @default(0)
  validate           Boolean   @default(false)
  created_at         DateTime? @default(now())
  updated_at         DateTime? @updatedAt

  Cards       Cards       @relation(fields: [card_id], references: [id])
  CompanyType CompanyType @relation(fields: [company_type_id], references: [id])

  @@map("company_business_cards")
}

<<<<<<< HEAD
// model CompanySecondaryUser {
//   id               String   @id @default(uuid())
//   user_permissions String[] @default([])
//   cnpj             String
//   user_name        String   @unique
//   password         String
//   company_admin_id String

//   CompanyUser CompanyUser @relation(fields: [company_admin_id], references: [id])

//   @@map("company_secondary_user")
//}

// model Category {
//   id               String @id @default(uuid())
//   name             String
//   correct_admin_id String

//   CorrectAdmin CorrectAdmin @relation(fields: [correct_admin_id], references: [id])

//   @@map("categories")
// }

model Product {
  id               String    @id @default(uuid())
  name             String
  description      String?
  banner           String    @default("")
  category_name    String
  company_user_id String
  created_at       DateTime? @default(now())
  updated_at       DateTime? @updatedAt
=======
model CompanyAddress {
  id           String  @id @default(uuid())
  street       String
  number       String
  complement   String?
  neighborhood String
  zip_code     String
  city         String
  state        String
  country      String
  cnpj         String  @unique

  @@map("company_addressess")
}

model Product {
  id              String    @id @default(uuid())
  name            String
  description     String?
  banner          String    @default("")
  category_name   String
  company_user_id String
  created_at      DateTime? @default(now())
  updated_at      DateTime? @updatedAt
>>>>>>> correct-nodejs-backend/main

  Advertisement Advertisement[]

  CompanyUser CompanyUser @relation(fields: [company_user_id], references: [id])

  @@map("products")
}

model Advertisement {
<<<<<<< HEAD
  id               String    @id @default(uuid())
  name             String
  description      String?
  price            Int
  banner           String    @default("")
  product_id       String
  created_at       DateTime? @default(now())
  updated_at       DateTime? @updatedAt
=======
  id              String    @id @default(uuid())
  name            String
  description     String?
  price           Int
  banner          String    @default("")
  product_id      String
  created_at      DateTime? @default(now())
  updated_at      DateTime? @updatedAt
>>>>>>> correct-nodejs-backend/main
  company_user_id String

  Product     Product     @relation(fields: [product_id], references: [id])
  CompanyUser CompanyUser @relation(fields: [company_user_id], references: [id])

  @@map("advertisements")
}
